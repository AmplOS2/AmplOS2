S {
        !aarch64-none-elf-g++ -ffreestanding -nostdinc -nostdinc++ -nostdlib -nostartfiles -c src/raspi/boot.S -o src/raspi/boot.o
}

image {
        # !aarch64-none-elf-ld -r -b binary -o src/raspi/image.o src/raspi/image.rle
        %CC tooling/image2rle tooling/image2rle.c
        %CC tooling/bin2arr tooling/bin2arr.c
        !tooling/image2rle > src/raspi/image.rle
        !tooling/bin2arr src/raspi/image.rle src/raspi/image.cbin image
}

cpp {
        %SET CPPC aarch64-none-elf-g++
        %APPEND CPPFLAGS -Wno-return-type -Wno-ignored-qualifiers -Wno-unused-function -fno-exceptions -ffreestanding -nostdinc -nostdinc++ -nostdlib -nostartfiles -c
        %CPPC src/main.o src/main.cpp
        %CPPC src/printf.o src/printf.cpp
        %CPPC src/pages.o src/pages.cpp
        %CPPC src/raspi/mbox.o src/raspi/mbox.cc
        %CPPC src/raspi/gpu.o src/raspi/gpu.cc
        %CPPC src/raspi/uart0.o src/raspi/uart0.cc
        %CPPC src/rle/rle.o src/rle/rle.c
}

link {
        !aarch64-none-elf-ld -T src/linker.ld -o anos.elf src/*.o src/*/*.o
}

objcopy {
        !aarch64-none-elf-objcopy anos.elf -O binary kernel8.img
}

clean {
        !rm -f anos.elf src/*.o src/*/*.o tooling/image2rle tooling/bin2arr
}

elf (S image cpp link) {}
img (elf objcopy) {}
all (img clean) {}

test (all) {
        # Currently the display is disabled, but once we have a UI,
        # we might want to re-enable it.
        # Append -s and -S to be able to use gdb
        !qemu-system-aarch64 -M raspi3 -serial stdio -kernel kernel8.img
}

image2rle {
        %CC image2rle tooling/image2rle.c
        !./image2rle > image.rle
        !rm -f image2rle
}

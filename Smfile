boot {
        !aarch64-none-elf-g++ -ffreestanding -nostdinc -nostdinc++ -nostdlib -nostartfiles -c boot/raspi.S -o boot/raspi.o
}

kernel {
        %SET CPPC aarch64-none-elf-g++
        %APPEND CPPFLAGS -Wno-return-type -Wno-ignored-qualifiers -Wno-unused-function -fno-exceptions -ffreestanding -nostdinc -nostdinc++ -nostdlib -nostartfiles -c -Ikernel
        %CPPC kernel/main.o kernel/main.cc
        %CPPC kernel/printf.o kernel/printf.cc
        %CPPC kernel/pages.o kernel/pages.cc
        %CPPC kernel/raspi/mbox.o kernel/raspi/mbox.cc
        %CPPC kernel/raspi/gpu.o kernel/raspi/gpu.cc
        %CPPC kernel/raspi/uart0.o kernel/raspi/uart0.cc
        # this is only for testing, TODO: remove
        %CPPC fs/afs.o fs/afs.hh
}

link {
        !aarch64-none-elf-ld -T boot/raspi.ld -o anos.elf boot/raspi.o kernel/*.o kernel/*/*.o
}

objcopy {
        !aarch64-none-elf-objcopy anos.elf -O binary kernel8.img
}

clean {
        !rm -f anos.elf kernel/*.o kernel/*/*.o
}

elf (boot kernel link) {}
img (elf objcopy) {}
all (img clean) {}

format {
        !clang-format -Werror -i --style=file --verbose */*.cc */*.hh */*.c */*.h */*/*.cc */*/*.hh */*/*.c */*/*.h
}

loc {
        !cloc --exclude-dir=demoimage .
}

test (all) {
        # Append -s and -S to be able to use gdb
        !qemu-system-aarch64 -M raspi3 -serial stdio -kernel kernel8.img
}
